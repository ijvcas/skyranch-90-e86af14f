
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Trash2, Square, Building, Leaf, ChevronDown, ChevronUp, Edit } from 'lucide-react';

interface SimplifiedPolygonControlsProps {
  onClearAll: () => void;
  selectedLotId: string | null;
  onDeleteSelected: () => void;
  polygonCount: number;
  lots: any[];
  onStartDrawing?: (lotId: string) => void;
  isDrawing?: boolean;
}

const SimplifiedPolygonControls: React.FC<SimplifiedPolygonControlsProps> = ({
  onClearAll,
  selectedLotId,
  onDeleteSelected,
  polygonCount,
  lots = [],
  onStartDrawing,
  isDrawing = false
}) => {
  const [isExpanded, setIsExpanded] = useState(false);
  
  // Count property lots (auto-generated) and pasture lots (user-created)
  const propertyLots = lots.filter(lot => lot.autoGenerated === true);
  const pastureLots = lots.filter(lot => lot.autoGenerated !== true);
  
  // Find lots without polygons (lots that exist but don't have saved polygon coordinates)
  const lotsWithoutPolygons = pastureLots.filter(lot => {
    // This is a simplified check - in a real scenario you'd check against saved polygons
    return !lot.hasPolygon; // This would need to be determined from polygon data
  });
  
  return (
    <div className="bg-white/90 backdrop-blur-sm border rounded-lg shadow-md">
      {/* Minimized state - thin banner */}
      {!isExpanded && (
        <div 
          className="flex items-center justify-between px-3 py-2 cursor-pointer hover:bg-gray-50 rounded-lg"
          onClick={() => setIsExpanded(true)}
        >
          <div className="flex items-center gap-3 text-sm">
            <div className="flex items-center gap-1">
              <Building className="w-3 h-3 text-gray-500" />
              <span className="text-gray-600">{propertyLots.length}</span>
            </div>
            <div className="flex items-center gap-1">
              <Leaf className="w-3 h-3 text-green-500" />
              <span className="text-gray-600">{pastureLots.length}</span>
            </div>
            {isDrawing && (
              <div className="flex items-center gap-1">
                <Edit className="w-3 h-3 text-blue-500" />
                <span className="text-blue-600 text-xs">Dibujando</span>
              </div>
            )}
          </div>
          <ChevronDown className="w-4 h-4 text-gray-400" />
        </div>
      )}
      
      {/* Expanded state - full controls */}
      {isExpanded && (
        <div className="p-3 space-y-3">
          <div className="flex items-center justify-between">
            <h3 className="text-sm font-medium text-gray-700">Controles de Lotes</h3>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setIsExpanded(false)}
              className="h-6 w-6 p-0"
            >
              <ChevronUp className="w-4 h-4" />
            </Button>
          </div>
          
          <div className="text-sm text-gray-600 space-y-1">
            <div className="flex items-center gap-2">
              <Building className="w-3 h-3 text-gray-500" />
              <span>Lotes de propiedad: {propertyLots.length}</span>
            </div>
            <div className="flex items-center gap-2">
              <Leaf className="w-3 h-3 text-green-500" />
              <span>Lotes de pastoreo: {pastureLots.length}</span>
            </div>
            {isDrawing && (
              <div className="flex items-center gap-2 text-blue-600">
                <Edit className="w-3 h-3" />
                <span>Modo dibujo activo</span>
              </div>
            )}
          </div>

          {/* Drawing controls for lots without polygons */}
          {onStartDrawing && pastureLots.length > 0 && (
            <div className="space-y-2">
              <h4 className="text-xs font-medium text-gray-500 uppercase tracking-wide">
                Dibujar Pol√≠gonos
              </h4>
              <div className="space-y-1 max-h-24 overflow-y-auto">
                {pastureLots.map(lot => (
                  <div key={lot.id} className="flex items-center justify-between text-sm">
                    <span className="text-gray-700 truncate flex-1">{lot.name}</span>
                    <Button
                      onClick={() => onStartDrawing(lot.id)}
                      size="sm"
                      variant="outline"
                      className="h-6 px-2 text-xs ml-2"
                      disabled={isDrawing}
                    >
                      <Edit className="w-3 h-3 mr-1" />
                      Dibujar
                    </Button>
                  </div>
                ))}
              </div>
            </div>
          )}
          
          {selectedLotId && (
            <Button
              onClick={onDeleteSelected}
              size="sm"
              variant="destructive"
              className="w-full flex items-center gap-2"
            >
              <Trash2 className="w-4 h-4" />
              Eliminar Seleccionado
            </Button>
          )}
          
          {pastureLots.length > 0 && (
            <Button
              onClick={onClearAll}
              size="sm"
              variant="outline"
              className="w-full flex items-center gap-2"
            >
              <Square className="w-4 h-4" />
              Limpiar Pastoreo
            </Button>
          )}
        </div>
      )}
    </div>
  );
};

export default SimplifiedPolygonControls;
