
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { MapPin, Trash2, Info } from 'lucide-react';
import { type Lot } from '@/stores/lotStore';
import LotAreaDisplay from './LotAreaDisplay';
import PermissionGuard from '../PermissionGuard';

interface LotCardProps {
  lot: Lot;
  onSelect: (lotId: string) => void;
  onDelete: (lotId: string) => void;
  polygonData?: {lotId: string; areaHectares?: number};
}

const LotCard: React.FC<LotCardProps> = ({ lot, onSelect, onDelete, polygonData }) => {
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-green-100 text-green-800';
      case 'inactive': return 'bg-gray-100 text-gray-800';
      case 'maintenance': return 'bg-yellow-100 text-yellow-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getGrassConditionColor = (condition: string) => {
    switch (condition) {
      case 'excellent': return 'text-green-600';
      case 'good': return 'text-green-500';
      case 'fair': return 'text-yellow-500';
      case 'poor': return 'text-red-500';
      default: return 'text-gray-500';
    }
  };

  const getGrassConditionText = (condition: string) => {
    switch (condition) {
      case 'excellent': return 'excelente';
      case 'good': return 'good';
      case 'fair': return 'regular';
      case 'poor': return 'pobre';
      default: return condition;
    }
  };

  // Clean description for auto-generated lots
  const getCleanDescription = (description?: string) => {
    if (!description) return '';
    
    // For auto-generated lots, show a cleaner description
    if ((lot as any).autoGenerated) {
      return 'Generado automáticamente desde datos catastrales';
    }
    
    return description;
  };

  return (
    <Card className="hover:shadow-md transition-shadow">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <CardTitle className="text-lg font-semibold flex items-center gap-2">
              {lot.name}
              {(lot as any).autoGenerated && (
                <Badge variant="secondary" className="text-xs">
                  Auto
                </Badge>
              )}
            </CardTitle>
            {getCleanDescription(lot.description) && (
              <p className="text-sm text-gray-600 mt-1">
                {getCleanDescription(lot.description)}
              </p>
            )}
          </div>
          
          <Badge className={getStatusColor(lot.status)}>
            {lot.status === 'active' ? 'active' : lot.status}
          </Badge>
        </div>
      </CardHeader>
      
      <CardContent className="space-y-3">
        {/* Area Information */}
        <div className="flex items-center text-sm text-gray-600">
          <MapPin className="w-4 h-4 mr-2" />
          <LotAreaDisplay 
            lot={lot} 
            calculatedArea={polygonData?.areaHectares}
          />
        </div>

        {/* Grass Condition */}
        <div className="flex items-center justify-between text-sm">
          <span className="text-gray-600">Condición del pasto:</span>
          <span className={`font-medium ${getGrassConditionColor(lot.grassCondition)}`}>
            {getGrassConditionText(lot.grassCondition)}
          </span>
        </div>

        {/* Animal Count */}
        {lot.currentAnimals !== undefined && (
          <div className="flex items-center justify-between text-sm">
            <span className="text-gray-600">Animales actuales:</span>
            <span className="font-medium">{lot.currentAnimals}</span>
          </div>
        )}

        {/* Action Buttons */}
        <div className="flex gap-2 mt-4">
          <Button 
            variant="outline" 
            size="sm" 
            onClick={() => onSelect(lot.id)}
            className="flex-1"
          >
            <Info className="w-4 h-4 mr-1" />
            Ver Detalles
          </Button>
          
          <PermissionGuard permission="lots_manage">
            <Button 
              variant="outline" 
              size="sm" 
              onClick={() => onDelete(lot.id)}
              className="text-red-600 hover:text-red-700 hover:bg-red-50"
            >
              <Trash2 className="w-4 h-4" />
            </Button>
          </PermissionGuard>
        </div>
      </CardContent>
    </Card>
  );
};

export default LotCard;
