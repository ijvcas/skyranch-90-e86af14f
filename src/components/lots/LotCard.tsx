
import React from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  MapPin, 
  Users, 
  Leaf, 
  Calendar,
  Trash2,
  Eye,
  Bot
} from 'lucide-react';
import { type Lot } from '@/stores/lotStore';

interface LotCardProps {
  lot: Lot & { 
    autoGenerated?: boolean; 
    sourceParcelId?: string; 
  };
  onSelect: (lotId: string) => void;
  onDelete: (lotId: string) => void;
  polygonArea?: number;
}

const LotCard: React.FC<LotCardProps> = ({ 
  lot, 
  onSelect, 
  onDelete,
  polygonArea 
}) => {
  const displayArea = polygonArea || lot.sizeHectares;

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-green-100 text-green-800';
      case 'inactive': return 'bg-gray-100 text-gray-800';
      case 'maintenance': return 'bg-yellow-100 text-yellow-800';
      case 'resting': return 'bg-blue-100 text-blue-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getGrassConditionColor = (condition: string) => {
    switch (condition) {
      case 'excellent': return 'text-green-600';
      case 'good': return 'text-green-500';
      case 'fair': return 'text-yellow-500';
      case 'poor': return 'text-red-500';
      default: return 'text-gray-500';
    }
  };

  return (
    <Card className="hover:shadow-md transition-shadow">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="flex-1">
            <CardTitle className="text-lg flex items-center gap-2">
              {lot.name}
              {lot.autoGenerated && (
                <Badge variant="secondary" className="text-xs flex items-center gap-1">
                  <Bot className="w-3 h-3" />
                  Auto
                </Badge>
              )}
            </CardTitle>
            {lot.description && (
              <p className="text-sm text-gray-600 mt-1">{lot.description}</p>
            )}
          </div>
          <Badge className={getStatusColor(lot.status)}>
            {lot.status}
          </Badge>
        </div>
      </CardHeader>
      
      <CardContent className="space-y-3">
        <div className="grid grid-cols-2 gap-3 text-sm">
          {displayArea && (
            <div className="flex items-center space-x-2">
              <MapPin className="w-4 h-4 text-gray-500" />
              <span>{displayArea.toFixed(2)} ha</span>
            </div>
          )}
          
          {lot.capacity && (
            <div className="flex items-center space-x-2">
              <Users className="w-4 h-4 text-gray-500" />
              <span>{lot.currentAnimals || 0}/{lot.capacity}</span>
            </div>
          )}
          
          {lot.grassType && (
            <div className="flex items-center space-x-2">
              <Leaf className="w-4 h-4 text-gray-500" />
              <span>{lot.grassType}</span>
            </div>
          )}
          
          {lot.grassCondition && (
            <div className="flex items-center space-x-2">
              <Leaf className={`w-4 h-4 ${getGrassConditionColor(lot.grassCondition)}`} />
              <span className={getGrassConditionColor(lot.grassCondition)}>
                {lot.grassCondition}
              </span>
            </div>
          )}
        </div>

        {lot.lastRotationDate && (
          <div className="flex items-center space-x-2 text-sm text-gray-600">
            <Calendar className="w-4 h-4" />
            <span>Última rotación: {new Date(lot.lastRotationDate).toLocaleDateString()}</span>
          </div>
        )}

        <div className="flex space-x-2 pt-2">
          <Button 
            variant="outline" 
            size="sm" 
            onClick={() => onSelect(lot.id)}
            className="flex-1 flex items-center space-x-1"
          >
            <Eye className="w-4 h-4" />
            <span>Ver Detalle</span>
          </Button>
          
          {!lot.autoGenerated && (
            <Button 
              variant="destructive" 
              size="sm" 
              onClick={() => onDelete(lot.id)}
              className="flex items-center space-x-1"
            >
              <Trash2 className="w-4 h-4" />
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default LotCard;
