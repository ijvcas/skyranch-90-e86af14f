
import React from 'react';
import { Card, CardContent, CardHeader } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Building, MapPin, Trash2, Users, Calendar, Leaf } from 'lucide-react';
import { type Lot } from '@/stores/lotStore';
import LotAreaDisplay from './LotAreaDisplay';
import InlineLotNameEditor from './InlineLotNameEditor';

interface LotCardProps {
  lot: Lot;
  onSelect: (lotId: string) => void;
  onDelete: (lotId: string) => void;
  polygonData?: Array<{lotId: string; areaHectares?: number}>;
}

const LotCard: React.FC<LotCardProps> = ({ lot, onSelect, onDelete, polygonData }) => {
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'bg-green-100 text-green-800';
      case 'resting': return 'bg-yellow-100 text-yellow-800';
      case 'maintenance': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'active': return 'Activo';
      case 'resting': return 'En Descanso';
      case 'maintenance': return 'Mantenimiento';
      default: return status;
    }
  };

  const isAutoGenerated = (lot as any).autoGenerated === true;
  const lotType = isAutoGenerated ? 'property' : 'pasture';
  const polygonArea = polygonData?.find(p => p.lotId === lot.id)?.areaHectares;

  return (
    <Card className="hover:shadow-md transition-shadow cursor-pointer">
      <CardHeader className="pb-3">
        <div className="flex items-start justify-between">
          <div className="flex items-center gap-2 flex-1 min-w-0">
            {isAutoGenerated ? (
              <Building className="w-4 h-4 text-gray-500 shrink-0" />
            ) : (
              <Leaf className="w-4 h-4 text-green-500 shrink-0" />
            )}
            <div className="flex-1 min-w-0">
              {isAutoGenerated ? (
                <h3 className="text-sm font-medium text-gray-900 truncate" title={lot.name}>
                  {lot.name}
                </h3>
              ) : (
                <InlineLotNameEditor
                  lotId={lot.id}
                  lotName={lot.name}
                  showEditIcon={true}
                />
              )}
            </div>
          </div>
          <div className="flex items-center gap-1 shrink-0">
            <Badge variant="secondary" className={getStatusColor(lot.status)}>
              {getStatusText(lot.status)}
            </Badge>
            {!isAutoGenerated && (
              <Button
                variant="ghost"
                size="sm"
                onClick={(e) => {
                  e.stopPropagation();
                  onDelete(lot.id);
                }}
                className="h-6 w-6 p-0 text-red-500 hover:text-red-700"
              >
                <Trash2 className="w-3 h-3" />
              </Button>
            )}
          </div>
        </div>
      </CardHeader>
      
      <CardContent className="pt-0" onClick={() => onSelect(lot.id)}>
        <div className="space-y-2 text-sm text-gray-600">
          <LotAreaDisplay 
            lot={lot}
            polygonArea={polygonArea}
            showPolygonHint={!isAutoGenerated}
          />
          
          {lot.capacity && (
            <div className="flex items-center gap-1">
              <Users className="w-3 h-3" />
              <span>Capacidad: {lot.capacity} animales</span>
            </div>
          )}
          
          {lot.grassType && (
            <div className="flex items-center gap-1">
              <Leaf className="w-3 h-3" />
              <span>Pasto: {lot.grassType}</span>
            </div>
          )}
          
          {lot.lastRotationDate && (
            <div className="flex items-center gap-1">
              <Calendar className="w-3 h-3" />
              <span>Última rotación: {new Date(lot.lastRotationDate).toLocaleDateString()}</span>
            </div>
          )}
          
          {lot.description && (
            <p className="text-xs text-gray-500 line-clamp-2">
              {lot.description}
            </p>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

export default LotCard;
