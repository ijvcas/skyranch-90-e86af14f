
import React from 'react';
import { Button } from '@/components/ui/button';
import { Plus } from 'lucide-react';
import LotStatistics from './LotStatistics';
import LotsGrid from './LotsGrid';
import EnhancedLotsEmptyState from './EnhancedLotsEmptyState';
import LoadingState from '../ui/loading-state';
import PermissionGuard from '../PermissionGuard';
import WorkflowGuide from './WorkflowGuide';
import SyncStatusCard from './SyncStatusCard';
import CadastralSyncButton from './CadastralSyncButton';
import DebugLotsButton from './DebugLotsButton';
import { type Lot } from '@/stores/lotStore';
import { useCadastralData } from '@/hooks/useCadastralData';

interface LotsOverviewProps {
  lots: Lot[];
  isLoading: boolean;
  onLotSelect: (lotId: string) => void;
  onCreateLot: () => void;
  onDeleteLot: (lotId: string) => void;
  onNavigateToCadastral: () => void;
  polygonData: Array<{lotId: string; areaHectares?: number}>;
}

const LotsOverview: React.FC<LotsOverviewProps> = ({
  lots,
  isLoading,
  onLotSelect,
  onCreateLot,
  onDeleteLot,
  onNavigateToCadastral,
  polygonData
}) => {
  const { propiedadParcelsCount, refresh: refreshCadastralData } = useCadastralData();
  
  const autoGeneratedLotsCount = lots.filter(lot => (lot as any).autoGenerated).length;
  const showWorkflowGuide = lots.length === 0 || propiedadParcelsCount > autoGeneratedLotsCount;

  const handleSyncComplete = () => {
    // Refresh both lots data and cadastral data
    window.location.reload();
  };

  if (isLoading) {
    return <LoadingState message="Cargando lotes..." />;
  }

  return (
    <div className="space-y-6">
      {/* Workflow Guide */}
      <WorkflowGuide 
        propiedadParcelsCount={propiedadParcelsCount}
        autoGeneratedLotsCount={autoGeneratedLotsCount}
        showGuide={showWorkflowGuide}
      />

      {/* Status Card and Action Buttons */}
      <div className="space-y-4">
        <SyncStatusCard 
          propiedadParcelsCount={propiedadParcelsCount}
          autoGeneratedLotsCount={autoGeneratedLotsCount}
        />
        
        <div className="flex flex-col md:flex-row items-start md:items-center justify-between gap-4">
          <LotStatistics lots={lots} />
          <div className="flex flex-col sm:flex-row gap-3">
            <CadastralSyncButton 
              onSyncComplete={handleSyncComplete} 
              propiedadParcelsCount={propiedadParcelsCount}
              size="default"
            />
            <DebugLotsButton onUpdateComplete={handleSyncComplete} />
            <PermissionGuard permission="lots_manage">
              <Button 
                onClick={onCreateLot} 
                variant="outline"
                className="flex items-center space-x-2"
              >
                <Plus className="w-4 h-4" />
                <span>Crear Lote Manual</span>
              </Button>
            </PermissionGuard>
          </div>
        </div>
      </div>

      {/* Content Area */}
      {lots.length === 0 ? (
        <EnhancedLotsEmptyState 
          propiedadParcelsCount={propiedadParcelsCount}
          onCreateLot={onCreateLot}
          onNavigateToCadastral={onNavigateToCadastral}
        />
      ) : (
        <LotsGrid 
          lots={lots}
          onLotSelect={onLotSelect}
          onDeleteLot={onDeleteLot}
          polygonData={polygonData}
        />
      )}
    </div>
  );
};

export default LotsOverview;
