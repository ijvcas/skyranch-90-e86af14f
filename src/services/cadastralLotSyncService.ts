
import { supabase } from '@/integrations/supabase/client';

export interface BidirectionalSyncResult {
  lots_created: number;
  lots_deleted: number;
  success: boolean;
  message: string;
}

export const syncCadastralParcelsToLots = async (): Promise<BidirectionalSyncResult> => {
  try {
    console.log('🔄 Starting bidirectional sync of PROPIEDAD parcels to property lots...');
    
    // First check if we have any PROPIEDAD parcels
    const { data: parcelsCheck, error: parcelsError } = await supabase
      .from('cadastral_parcels')
      .select('id, parcel_id, status')
      .eq('status', 'PROPIEDAD');
    
    if (parcelsError) {
      console.error('❌ Error checking PROPIEDAD parcels:', parcelsError);
      throw parcelsError;
    }
    
    console.log(`📊 Found ${parcelsCheck?.length || 0} PROPIEDAD parcels before sync`);
    
    // Call the database function to create/cleanup property lots
    const { data, error } = await supabase.rpc('create_lots_from_propiedad_parcels');
    
    if (error) {
      console.error('❌ Database function error:', error);
      throw error;
    }
    
    console.log(`✅ Bidirectional sync function executed successfully. Results:`, data);
    
    // Return the first (and only) result from the function
    if (data && data.length > 0) {
      const result = data[0];
      console.log(`📈 Sync completed: ${result.lots_created} lots created, ${result.lots_deleted} lots deleted`);
      return result;
    }
    
    return {
      lots_created: 0,
      lots_deleted: 0,
      success: true,
      message: 'No changes were needed'
    };
  } catch (error) {
    console.error('❌ Unexpected error in syncCadastralParcelsToLots:', error);
    throw error;
  }
};

export const getAutoGeneratedLotsInfo = async () => {
  try {
    console.log('🔍 Fetching auto-generated property lots info...');
    
    const { data, error } = await supabase
      .from('lots')
      .select(`
        id,
        name,
        auto_generated,
        lot_type,
        source_parcel_id,
        cadastral_parcels!source_parcel_id(parcel_id, status)
      `)
      .eq('auto_generated', true)
      .eq('lot_type', 'property');
    
    if (error) {
      console.error('❌ Error fetching auto-generated property lots info:', error);
      throw error;
    }
    
    console.log(`📊 Found ${data?.length || 0} auto-generated property lots`);
    return data || [];
  } catch (error) {
    console.error('❌ Error in getAutoGeneratedLotsInfo:', error);
    throw error;
  }
};
