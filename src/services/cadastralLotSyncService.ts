
import { supabase } from '@/integrations/supabase/client';

export interface SyncResult {
  action: string;
  returned_lot_id: string;
  parcel_id: string;
  lot_name: string;
}

export const syncCadastralParcelsToLots = async (): Promise<SyncResult[]> => {
  try {
    console.log('🔄 Starting sync of PROPIEDAD parcels to lots...');
    
    // First check if we have any PROPIEDAD parcels
    const { data: parcelsCheck, error: parcelsError } = await supabase
      .from('cadastral_parcels')
      .select('id, parcel_id, status')
      .eq('status', 'PROPIEDAD');
    
    if (parcelsError) {
      console.error('❌ Error checking PROPIEDAD parcels:', parcelsError);
      throw parcelsError;
    }
    
    console.log(`📊 Found ${parcelsCheck?.length || 0} PROPIEDAD parcels before sync`);
    
    if (!parcelsCheck || parcelsCheck.length === 0) {
      console.warn('⚠️ No PROPIEDAD parcels found to sync');
      return [];
    }
    
    // Call the database function
    const { data, error } = await supabase.rpc('sync_propiedad_parcels_to_lots');
    
    if (error) {
      console.error('❌ Database function error:', error);
      console.error('❌ Error details:', {
        message: error.message,
        details: error.details,
        hint: error.hint,
        code: error.code
      });
      throw error;
    }
    
    console.log(`✅ Sync function executed successfully. Results:`, data);
    console.log(`📈 Number of operations performed: ${data?.length || 0}`);
    
    // Log each result for debugging and map returned_lot_id to lot_id for compatibility
    if (data && data.length > 0) {
      const mappedResults = data.map((result: any, index: number) => {
        console.log(`📋 Operation ${index + 1}:`, {
          action: result.action,
          lot_id: result.returned_lot_id,
          parcel_id: result.parcel_id,
          lot_name: result.lot_name
        });
        
        // Map returned_lot_id to lot_id for backward compatibility
        return {
          action: result.action,
          lot_id: result.returned_lot_id,
          parcel_id: result.parcel_id,
          lot_name: result.lot_name
        };
      });
      
      return mappedResults;
    }
    
    return data || [];
  } catch (error) {
    console.error('❌ Unexpected error in syncCadastralParcelsToLots:', error);
    if (error instanceof Error) {
      console.error('❌ Error message:', error.message);
      console.error('❌ Error stack:', error.stack);
    }
    throw error;
  }
};

export const getAutoGeneratedLotsInfo = async () => {
  try {
    console.log('🔍 Fetching auto-generated lots info...');
    
    const { data, error } = await supabase
      .from('lots')
      .select(`
        id,
        name,
        auto_generated,
        source_parcel_id,
        cadastral_parcels!source_parcel_id(parcel_id, status)
      `)
      .eq('auto_generated', true);
    
    if (error) {
      console.error('❌ Error fetching auto-generated lots info:', error);
      throw error;
    }
    
    console.log(`📊 Found ${data?.length || 0} auto-generated lots`);
    return data || [];
  } catch (error) {
    console.error('❌ Error in getAutoGeneratedLotsInfo:', error);
    throw error;
  }
};
