
import { EmailRequest, EmailResult, EmailTransport, EventDetails } from '../interfaces/EmailTypes';
import { EmailValidator } from './EmailValidator';
import { EmailErrorHandler } from './EmailErrorHandler';
import { emailLogger } from './EmailLogger';
import { ResendTransport } from '../transport/ResendTransport';
import { CalendarEventTemplate } from '../templates/CalendarEventTemplate';
import { TestEmailTemplate } from '../templates/TestEmailTemplate';

export class EmailEngine {
  private transport: EmailTransport;
  private calendarTemplate: CalendarEventTemplate;
  private testTemplate: TestEmailTemplate;

  constructor() {
    this.transport = new ResendTransport();
    this.calendarTemplate = new CalendarEventTemplate();
    this.testTemplate = new TestEmailTemplate();
  }

  async sendCalendarEventEmail(
    to: string,
    eventType: 'created' | 'updated' | 'deleted' | 'reminder',
    eventDetails: EventDetails,
    userName?: string
  ): Promise<EmailResult> {
    emailLogger.info('Sending calendar event email', { to, eventType, eventTitle: eventDetails.title });

    try {
      // Generate email content using template
      const emailContent = this.calendarTemplate.render({
        userName: userName || to.split('@')[0],
        organizationName: 'SkyRanch',
        title: eventDetails.title,
        content: '', // Content is generated by template
        eventType,
        event: eventDetails
      });

      // Prepare email request
      const emailRequest: EmailRequest = {
        to: { email: to },
        content: emailContent,
        metadata: {
          senderName: "SkyRanch - Sistema de Gestión Ganadera",
          organizationName: "SkyRanch",
          tags: [
            { name: 'category', value: 'calendar-event' },
            { name: 'event-type', value: eventType },
            { name: 'sender', value: 'skyranch' }
          ]
        },
        eventDetails
      };

      // Validate request
      const validation = EmailValidator.validateEmailRequest(emailRequest);
      if (!validation.valid) {
        const error = EmailErrorHandler.handleValidationError(validation.errors);
        return {
          success: false,
          error: error.message,
          details: error
        };
      }

      // Send email
      return await this.transport.send(emailRequest);

    } catch (error) {
      emailLogger.error('Calendar event email failed', error);
      const emailError = EmailErrorHandler.categorizeError(error);
      
      return {
        success: false,
        error: emailError.message,
        details: emailError
      };
    }
  }

  async sendTestEmail(to: string, testType: 'basic' | 'integration' | 'stress' = 'basic'): Promise<EmailResult> {
    emailLogger.info('Sending test email', { to, testType });

    try {
      // Generate email content using template
      const emailContent = this.testTemplate.render({
        userName: to.split('@')[0],
        organizationName: 'SkyRanch',
        title: 'Test Email',
        content: '', // Content is generated by template
        testType
      });

      // Prepare email request
      const emailRequest: EmailRequest = {
        to: { email: to },
        content: emailContent,
        metadata: {
          senderName: "SkyRanch - Sistema de Gestión Ganadera",
          organizationName: "SkyRanch",
          tags: [
            { name: 'category', value: 'test' },
            { name: 'test-type', value: testType },
            { name: 'sender', value: 'skyranch' }
          ]
        }
      };

      // Validate request
      const validation = EmailValidator.validateEmailRequest(emailRequest);
      if (!validation.valid) {
        const error = EmailErrorHandler.handleValidationError(validation.errors);
        return {
          success: false,
          error: error.message,
          details: error
        };
      }

      // Send email
      return await this.transport.send(emailRequest);

    } catch (error) {
      emailLogger.error('Test email failed', error);
      const emailError = EmailErrorHandler.categorizeError(error);
      
      return {
        success: false,
        error: emailError.message,
        details: emailError
      };
    }
  }

  async sendCustomEmail(request: EmailRequest): Promise<EmailResult> {
    emailLogger.info('Sending custom email', { 
      to: Array.isArray(request.to) ? request.to.map(t => t.email) : request.to.email,
      subject: request.content.subject
    });

    try {
      // Validate request
      const validation = EmailValidator.validateEmailRequest(request);
      if (!validation.valid) {
        const error = EmailErrorHandler.handleValidationError(validation.errors);
        return {
          success: false,
          error: error.message,
          details: error
        };
      }

      // Send email
      return await this.transport.send(request);

    } catch (error) {
      emailLogger.error('Custom email failed', error);
      const emailError = EmailErrorHandler.categorizeError(error);
      
      return {
        success: false,
        error: emailError.message,
        details: emailError
      };
    }
  }

  // Utility methods
  getLogger() {
    return emailLogger;
  }

  async healthCheck(): Promise<{ healthy: boolean; details: any }> {
    emailLogger.info('Performing email system health check');
    
    try {
      // We could test connectivity, API keys, etc. here
      // For now, just check if transport is available
      const healthy = !!this.transport;
      
      return {
        healthy,
        details: {
          transportAvailable: !!this.transport,
          templatesLoaded: !!(this.calendarTemplate && this.testTemplate),
          timestamp: new Date().toISOString()
        }
      };
    } catch (error) {
      emailLogger.error('Health check failed', error);
      return {
        healthy: false,
        details: { error: error.message }
      };
    }
  }
}

// Singleton instance
export const emailEngine = new EmailEngine();
